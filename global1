var assertNotEqual=function tester(name,actual,expected){
	tests[`${name}不等于${expected}（实际值：${actual}）`]=actual!==expected;
};
postman.setGlobalVariable("assertNotEqual",assertNotEqual);
var assertNotTimeout=function tester(){
var hasResponse=postman.getResponseHeader('Content-Type')?true:false; if(!hasResponse) tests['服务端在超时前没返回任何数据，请检查相关服务、网络或反向代理设置（以下跳过其他断言）']=false;
};postman.setGlobalVariable("assertNotTimeout",assertNotTimeout);

var logParams=function tester(){
	var hasResponse=postman.getResponseHeader('Content-Type')?true:false;if(!hasResponse) tests['服务端在超时前没返回任何数据，请检查相关服务、网络或反向代理设置（以下跳过其他断言）']=false;
	if(hasResponse) tests[`[INFO] （仅限POST，超时没返回时不解析）以下为请求参数：    ${JSON.stringify(request.data)}`]=true;
}
postman.setGlobalVariable("logParams",logParams);
var getResponseJson=function tester(){
try{
	var hasResponse=postman.getResponseHeader('Content-Type')?true:false; if(!hasResponse) tests['服务端在超时前没返回任何数据，请检查相关服务、网络或反向代理设置（以下跳过其他断言）']=false;
	if(hasResponse) var json=JSON.parse(responseBody);}catch(err){ tests['服务端没返回合法的JSON格式，请检查相关服务、网络或反向代理设置（以下跳过其他断言）']=false; tests[`[INFO] 返回：${responseBody}`]=true; console.error(err);}

}
postman.setGlobalVariable("getResponseJson",getResponseJson);
var assertType=function(name,value,type){
let isType=(type==='array')? Array.isArray(value):typeof value===type; tests[`${name}为${type}（实际值：${value}）`]=isType;
    
};
postman.setGlobalVariable("assertType",assertType);

var assertEqual=function tester(name,expected,actual){
tests[`${name}等于${expected}（实际值：${actual}）`]=actual===expected;};
postman.setGlobalVariable("assertEqual",assertEqual);

//使用
//当success === false定义打印返回中的message 且标记为true///////////////////////////////////////////////
var printMessage1=function tester(){
 var printMessage1=(responseBody.has("message")&&JSON.parse(responseBody).success === false)?true:false;if(printMessage1) tests['HasMessage   '+ JSON.parse(responseBody).message]=true;}
 postman.setGlobalVariable("printMessage1", printMessage1);
 //当success === false定义打印返回中的message 且标记为true//////////////////////////////////////////////

var printMessage0 = function tester() {
	var printMessage0 = (responseBody.has("message") && JSON.parse(responseBody).success === false) ? true : false;
	if (printMessage0) tests['HasMessage   ' + JSON.parse(responseBody).message] = false;
}
postman.setGlobalVariable("printMessage0", printMessage0);
//validate  object validateMultipleArr
var validateMultipleArr = function tester(API,PreAPI,AcArr,ExObj) {
try {
       if (responseCode.code === 200) {
			//如果长度不为1，返回空报错
			if(AcArr.length===1){
			var A = tv4.validateMultiple(AcArr[0], ExObj);
			           var AisValid = A.valid;
			           postman.setEnvironmentVariable("AisValid", AisValid);
			           if (!AisValid) {
							             for (j = 0; j < A.errors.length; j++) {
							               tests['Invalid Schema:'+`${API}`+'after'+`${PreAPI}` +'    '+  A.errors[j] + ' at ' + A.errors[j].dataPath +A.errors[j].schemaPath] = AisValid;
							             }

			             } else {
			             tests[`${API}`+'return success after'+ `${PreAPI}`] = AisValid;

			           }
			}else{tests['get empty data']=AcArr.length===1;}

			       } else {
			         tests[`${API}`+'  Status code is 200'] = responseCode.code === 200;
			       }
     } catch (e) {
       tests[`${API}`+'exception'+e] = false;
     }

};
 postman.setGlobalVariable("validateMultipleArr", validateMultipleArr);
 
var validateMultipleObj = function tester(API,PreAPI,AcObj,ExObj) {
try {
       if (responseCode.code === 200) {
			 
			 
			var A = tv4.validateMultiple(AcObj, ExObj);
			           var AisValid = A.valid;
			           postman.setEnvironmentVariable("AisValid", AisValid);
			           if (!AisValid) {
							             for (j = 0; j < A.errors.length; j++) {
							               tests['Invalid Schema:'+`${API}`+'after'+`${PreAPI}` +'    '+  A.errors[j] + ' at ' + A.errors[j].dataPath +A.errors[j].schemaPath] = AisValid;
							             }

			             } else {
			             tests[`${API}`+'return success after'+ `${PreAPI}`] = AisValid;

			           }
			 

			       } else {
			         tests[`${API}`+'  Status code is 200'] = responseCode.code === 200;
			       }
     } catch (e) {
       tests[`${API}`+'exception'+e] = false;
     }

};
 postman.setGlobalVariable("validateMultipleObj", validateMultipleObj);
  ///////////////////////retryOnFailure 非successCode 重试n次/////////retryOnFailure（200,n）/////////////////////////////////////////
     var retryOnFailure=function retryOnFailure(successCode, numberOfRetrys) {
    var key = request.name + '_counter';
    var execCounter = postman.getEnvironmentVariable(key) || 1;

    var sleepDuration = 1000;
    var waitUntilTime = new Date().getTime() + sleepDuration;
    if (responseCode.code !== successCode && execCounter <= numberOfRetrys) {
        while (new Date().getTime() < waitUntilTime) {
            // Do Nothing -> Wait
        }
        console.log('Retrying: ' + request.name + '\nGot: ' + responseCode.code + ' Expected: ' + successCode + '\nWaited: ' + sleepDuration / 1000 + 'sec  \nRetry Number: ' + execCounter + ' of ' + numberOfRetrys);
        execCounter++;
        postman.setEnvironmentVariable(key, execCounter);
        postman.setNextRequest(request.name);
    }};
     
postman.setGlobalVariable("retryOnFailure", retryOnFailure);

var  setUpdateKey=function tester(UpdateType){
    
    postman.setEnvironmentVariable("Index",0);
    var Index=parseInt(environment["Index"]);
     console.log('Index is'+Index);
    //初始化为UpdateType 环境变量， 
    try{
 
        for(var i=0;i<=UpdateType.length-1;i++){
            tests["lent is   "+UpdateType.length+"   UpdateType "+i+"  is " +UpdateType[i]]=true;
        }
    } catch(e) {
        tests[" set value have exception is"+e]=false;
    }
    //更新后，若数字不等于3，则Pool下标Index +1 且跑下一个savePool
    try{
        var randomNo=""+new Date().getTime();
        var randomNo=randomNo.substr(-5,5);
        postman.setEnvironmentVariable("type",UpdateType[Index]);
        tests["type is"+environment["type"]]=true;
        postman.setEnvironmentVariable(UpdateType[Index], environment["type"]+randomNo+"");
        var typeValue =environment[UpdateType[Index]];
        postman.setEnvironmentVariable("typeValue",typeValue);
        tests["set type "+environment["type"]]=true;
        tests["set typeValue "+environment["typeValue"]]=true;
    } catch(e) {
        tests[" set firest  typeValue   have exception is"+e]=false;
    }
        tests["response code is 200"] = responseCode.code === 200;
    
    try {
        var data = JSON.parse(responseBody);
    } catch(e) {
        console.log('Cannot parse response,probably not a JSON');
    }
}
    postman.setGlobalVariable("setUpdateKey", setUpdateKey);
 
 // NextRequest('CMSSaveApp', appsetUpdateKey);
 

var NextRequest=function tester(requestName,UpdateType){
 // var UpdateType=environment["UpdateType"].split(","); 
 // //更新后，若数字不等于UpdateType.length，下标Index +1 且跑下一个requestName
 try{
    var index=environment.Index;
     if(index == UpdateType.length-1){ 
      console.log(" stops run  " + `${requestName}` + " update Index is  "+ index );
     }
     else{  index++;
        postman.setEnvironmentVariable("Index", index);
        console.log('after +1 index is ' + index );
             
        try{
            var randomNo=""+new Date().getTime();
            var randomNo=randomNo.substr(-5,5);
            postman.setEnvironmentVariable("type",UpdateType[index]);
            postman.setEnvironmentVariable(UpdateType[index], environment["type"]+randomNo+"");
            var typeValue =environment[UpdateType[index]];
            postman.setEnvironmentVariable("typeValue",typeValue);
             postman.setNextRequest(requestName);
           console.log('setNextRequest  '+`${requestName}` + " typeValue is "+environment["typeValue"]+ "  type is  "+environment["type"] );
        } catch(e) {
            tests[" index+1  have exception is"+e]=false;
        }
    }
} catch(e){tests[' index+1  have exception '+ `${requestName}` +e]=false;}  
 //若为某个数字则更新某个环境变
 }
    postman.setGlobalVariable("NextRequest", NextRequest);
//   var printMessage0=eval('('+globals.printMessage0+')');
// var printMessage1=eval('('+globals.printMessage1+')');
// var logParams=eval('('+globals.logParams+')');//是否有Content-Type
// var validateMultipleArr=eval('('+globals.validateMultipleArr+')');
// var retryOnFailure=eval('('+globals.retryOnFailure+')');
// var assertType=eval('('+globals.assertType+')');
// var validateMultipleObj=eval('('+globals.validateMultipleObj+')');
// var setUpdateKey=eval('('+globals.setUpdateKey+')');
// var NextRequest=eval('('+globals.NextRequest+')');

// var assertNotEqual = eval('('+globals.assertNotEqual+')');
// var getResponseJson=eval('('+globals.getResponseJson+')');
//  var assertEqual=eval('('+globals.assertEqual+')');

 
// //使用实例

//  printMessage1();
//  printMessage0();
// assertNotEqual("name", 'actual', 'expected');//字段name的实际是否等于实际值
// logParams();
// getResponseJson();
// assertType('name','value','array');
// assertEqual('name','actual','expecte');
// // validateMultipleArr('CMSGetApp','testpre',JSON.parse(responseBody).data,expCMSGetApp);
// // validateMultipleObj('CMSGetApp','testpre',JSON.parse(responseBody).result,expCMSGetApp);
// retryOnFailure(200,2);
// setUpdateKey(UpdateType);
 // var UpdateType=new Array("assetDept","ciServiceCodeSupporter","description","name","specialComponentDescribe","specialSegment")
// NextRequest('requestName',UpdateType);


 

 
